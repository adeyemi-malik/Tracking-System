// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using TrackingSystemDLayer.DataModels;

namespace TrackingSystemDLayer.Migrations
{
    [DbContext(typeof(Entities<int>))]
    [Migration("20171017161107_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TrackingSystemDLayer.DataModels.Device<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("TrackingSystemDLayer.DataModels.Location<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("Date");

                    b.Property<int>("DeviceId");

                    b.Property<string>("Latitude")
                        .IsRequired();

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("TrackingSystemDLayer.DataModels.Role<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("User<int>Id");

                    b.HasKey("Id");

                    b.HasIndex("User<int>Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("TrackingSystemDLayer.DataModels.User<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<bool>("LockOutEnabled");

                    b.Property<DateTimeOffset?>("LockOutEndDate");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("OtherName")
                        .HasMaxLength(256);

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("Phone");

                    b.Property<bool>("PhoneConfirmed");

                    b.Property<int?>("Role<int>Id");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("Role<int>Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TrackingSystemDLayer.DataModels.UserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Claims");
                });

            modelBuilder.Entity("TrackingSystemDLayer.DataModels.UserLogin<int>", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(256);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(256);

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id", "LoginProvider", "ProviderKey");

                    b.ToTable("Logins");
                });

            modelBuilder.Entity("TrackingSystemDLayer.DataModels.Device<int>", b =>
                {
                    b.HasOne("TrackingSystemDLayer.DataModels.User<int>", "User")
                        .WithMany("Devices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrackingSystemDLayer.DataModels.Location<int>", b =>
                {
                    b.HasOne("TrackingSystemDLayer.DataModels.Device<int>", "Device")
                        .WithMany("Locations")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrackingSystemDLayer.DataModels.Role<int>", b =>
                {
                    b.HasOne("TrackingSystemDLayer.DataModels.User<int>")
                        .WithMany("Roles")
                        .HasForeignKey("User<int>Id");
                });

            modelBuilder.Entity("TrackingSystemDLayer.DataModels.User<int>", b =>
                {
                    b.HasOne("TrackingSystemDLayer.DataModels.Role<int>")
                        .WithMany("Users")
                        .HasForeignKey("Role<int>Id");
                });

            modelBuilder.Entity("TrackingSystemDLayer.DataModels.UserClaim<int>", b =>
                {
                    b.HasOne("TrackingSystemDLayer.DataModels.User<int>", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrackingSystemDLayer.DataModels.UserLogin<int>", b =>
                {
                    b.HasOne("TrackingSystemDLayer.DataModels.User<int>", "User")
                        .WithMany("Logins")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
